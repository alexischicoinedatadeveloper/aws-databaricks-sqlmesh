name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    env:
      TF_WORKING_DIR: terraform
      TF_VAR_region: ${{ vars.REGION }}
      TF_VAR_databricks_account_id: ${{ secrets.DATABRICKS_ACCOUNT_ID }}
      TF_VAR_aws_access_key_id: ${{ secrets.TERRAFORM_USER_AWS_ACCESS_KEY }}
      TF_VAR_aws_secret_access_key: ${{ secrets.TERRAFORM_USER_AWS_ACCESS_KEY_SECRET }}
      TF_VAR_databricks_terraform_account_client_id: ${{ secrets.DATABRICKS_ACCOUNT_TERRAFORM_USER_CLIENT_ID }}
      TF_VAR_databricks_terraform_account_secret: ${{ secrets.DATABRICKS_ACCOUNT_TERRAFORM_USER_SECRET }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.TERRAFORM_USER_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.TERRAFORM_USER_AWS_ACCESS_KEY_SECRET }}
        aws-region: ${{ vars.REGION }}

    - name: install-databricks-cli
      uses: microsoft/install-databricks-cli@v1.0.0

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ${{ env.TF_WORKING_DIR }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ${{ env.TF_WORKING_DIR }}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      working-directory: ${{ env.TF_WORKING_DIR }}